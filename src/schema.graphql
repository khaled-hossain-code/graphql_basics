type Query {
  me: User
  post: Post
  users(query: String): [User!]!
  posts(postQuery: String): [Post!]!
  comments: [Comment!]!
}

type Mutation {
  createUser(data: createUserInput): User!
  deleteUser(id: ID!): User!
  updateUser(id: ID!, data: updateUserInput!): User!
  createPost(data: createPostInput): Post!
  updatePost(id: ID!, data: updatePostInput): Post!
  deletePost(id: ID!): Post!
  createComment(data: createCommentInput!): Comment!
  updateComment(id: ID!, data: updateCommentInput!): Comment! 
  deleteComment(id: ID!): Comment!
}

type Subscription {
  comment(postId: String!): CommentSubscriptionPayload!
  post: PostSubscriptionPayload!
}

input createUserInput {
  name: String!
  email: String!
  age: Int
}

input updateUserInput {
  name: String
  email: String
  age: Int
}

input createPostInput {
  title: String!
  body: String!
  published: Boolean!
  author: ID!
}

input updatePostInput {
  title: String
  body: String
  published: Boolean
}

input createCommentInput {
  text: String!
  author: ID!
  post: ID!
}

input updateCommentInput {
  text: String 
}

type User {
  id: ID!
  name: String!
  email: String!
  age: Int
  posts: [Post!]!
  comments: [Comment!]!
}

type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean
  author: User!
  comments: [Comment!]!
}

type Comment {
  id: ID!
  text: String!
  author: User!
  post: Post!
}

type PostSubscriptionPayload {
  mutation: MutationType!,
  data: Post!
}

type CommentSubscriptionPayload {
  mutation: MutationType!,
  data: Comment!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}